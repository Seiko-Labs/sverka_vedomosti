{"UsV3Lokspy":{"x":502.17268699386506,"y":486.0197647905814,"type":"start","connections":{"inputs":{"actionPort":[{"nodeId":"ssNkRVJjfH","portName":"actionPort"}]},"outputs":{}},"inputData":{"actionPort":{}},"expanded":true,"root":true,"actions":{"data":{}},"id":"UsV3Lokspy"},"ssNkRVJjfH":{"id":"ssNkRVJjfH","x":704.1579235631297,"y":352.85384423823274,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"2wAMX0gFgF","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"UsV3Lokspy","portName":"actionPort"}]}},"inputData":{"script":{"text":"import os\r\nfrom dataclasses import dataclass\r\nfrom typing import List\r\n\r\n@dataclass\r\nclass Credentials:\r\n    usr: str\r\n    psw: str\r\n\r\n@dataclass\r\nclass Process:\r\n    name: str\r\n    path: str\r\n\r\n@dataclass\r\nclass Dimension:\r\n    width: int\r\n    height: int\r\n\r\n@dataclass\r\nclass ExcelInfo:\r\n    path: str\r\n    name: str\r\n\r\n@dataclass\r\nclass ArchiveInfo:\r\n    zip_dir: str\r\n    zip_name: str\r\n    file_name: str = None\r\n\r\n    def __post_init__(self) -> None:\r\n        self.file_name = os.path.splitext(self.zip_name)[0]\r\n\r\n@dataclass\r\nclass EmailInfo:\r\n    email_list: List[str]\r\n    subject: str = None\r\n    body: str = None\r\n    attachment: str = None\r\n\r\n@dataclass\r\nclass Data:\r\n    usr: str\r\n    psw: str\r\n    process_name: str\r\n    process_path: str\r\n    excel_path: str\r\n    excel_name: str\r\n    zip_dir: str\r\n    zip_file: str\r\n    email_list: List[str]\r\n\r\n    data: dict = None\r\n\r\n    def __post_init__(self) -> None:\r\n        self.attachment = self.zip_file\r\n        self.data = {\r\n            'credentials': Credentials(usr=self.usr, psw=self.psw),\r\n            'process': Process(name=self.process_name, path=self.process_path),\r\n            'excel': ExcelInfo(path=self.excel_path, name=self.excel_name),\r\n            'archive_info': ArchiveInfo(zip_dir=self.zip_dir, zip_name=self.zip_file),\r\n            'email_info': EmailInfo(email_list=self.email_list)\r\n        }\r\n\r\n__return__ = (Credentials, Process, Dimension, ExcelInfo, ArchiveInfo, EmailInfo, Data)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Dataclasses"},"2wAMX0gFgF":{"id":"2wAMX0gFgF","x":703.6170301856727,"y":445.66731346111385,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"GJ_3m2NO-a","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"ssNkRVJjfH","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport re\r\nimport shutil\r\nimport openpyxl\r\nfrom openpyxl.worksheet.worksheet import Worksheet\r\nfrom datetime import datetime as dt\r\nfrom typing import List\r\n\r\ndataclasses = {%ssNkRVJjfH%}\r\nExcelInfo = dataclasses[3]\r\nDimension = dataclasses[2]\r\n\r\nclass Excel:\r\n    def __init__(self, excel: ExcelInfo) -> None:\r\n        self.excel_path = excel.path\r\n        self.excel_name = excel.name\r\n        shutil.copyfile(os.path.join(self.excel_path, self.excel_name), os.path.join(r'C:', 'test.xlsx'))\r\n\r\n        self.workbook = openpyxl.load_workbook(filename=os.path.join(r'C:', 'test.xlsx'), data_only=True)\r\n        self.default_sheet = self.workbook.worksheets[0]\r\n        raw_dimension = Dimension(width=self.default_sheet.max_column, height=self.default_sheet.max_row)\r\n        self.rows = self.get_all_rows(self.default_sheet, raw_dimension)\r\n\r\n        self.new_dimension = Dimension(width=self.get_width(), height=self.get_height())\r\n        self.rows = [row[0:self.new_dimension.width] for row in self.rows[:self.new_dimension.height]]\r\n\r\n        self.new_workbook = openpyxl.Workbook()\r\n        self.new_sheet = self.new_workbook.worksheets[0]\r\n        self.corrected_name = ''\r\n        self.date = self.get_date()\r\n\r\n    def get_date(self) -> str:\r\n        months_dict = {1: 'JAN', 2: 'FEV', 3: 'MAR', 4: 'APR', 5: 'MAI', 6: 'IYN',\r\n                       7: 'JYL', 8: 'AVG', 9: 'SEN', 10: 'OKT', 11: 'NOJ', 12: 'DEK'}\r\n        date = dt.strptime(re.search(r'\\d\\d\\.\\d\\d\\.\\d{4,}', self.rows[0][0]).group(), '%d.%m.%Y')\r\n        return f'{months_dict[date.month]}_{date.year}'\r\n\r\n    def correct(self) -> None:\r\n        self.xl_copy()\r\n        self.remove_empty_cols()\r\n        self.corrected_name = f'Prov_{self.date}.xlsx'\r\n        new_path = os.path.join(r'C:\\Temp', self.corrected_name)\r\n        open(new_path, 'w').close()\r\n        self.new_workbook.save(filename=new_path)\r\n        # shutil.copyfile(src=r'C:\\Users\\robot.ad\\Desktop\\Prov_JYL_2022.xlsx', dst=new_path)\r\n\r\n    @staticmethod\r\n    def get_all_rows(sheet: Worksheet, dim: Dimension) -> List[tuple]:\r\n        return [vals for vals in sheet.iter_rows(1, dim.height, 1, dim.width, values_only=True)]\r\n\r\n    @staticmethod\r\n    def get_latest_full_cell(row: tuple) -> int:\r\n        for i, val in enumerate(reversed(row)):\r\n            if not val:\r\n                continue\r\n            return len(row) - i\r\n\r\n    def get_width(self) -> int:\r\n        last_positions = [self.get_latest_full_cell(row) for row in self.rows if self.get_latest_full_cell(row)]\r\n        return max(set(last_positions), key=last_positions.count)\r\n\r\n    def get_height(self) -> int:\r\n        return next((len(self.rows) - i for i, row in enumerate(reversed(self.rows)) if 'ВСЕГО' in row), self.default_sheet.max_row)\r\n\r\n    def xl_copy(self) -> None:\r\n        for i in range(1, self.new_dimension.height + 1):\r\n            for j in range(1, self.new_dimension.width + 1):\r\n                cell = self.default_sheet.cell(row=i, column=j)\r\n                _ = self.new_sheet.cell(row=i, column=j, value=cell.value)\r\n\r\n    def find_empty_columns(self) -> List[int]:\r\n        st = next(i + 1 for i, col in enumerate(self.rows[3]) if col)\r\n        cols = self.rows[3][st::]\r\n        return [i + 1 for i, col in enumerate(cols, start=st) if not col]\r\n\r\n    def remove_empty_cols(self) -> None:\r\n        empty_cols = self.find_empty_columns()\r\n        for i, col_idx in enumerate(empty_cols):\r\n            self.new_sheet.delete_cols(col_idx - i, 1)\r\n\r\n__return__ = Excel"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Excel class"},"GJ_3m2NO-a":{"id":"GJ_3m2NO-a","x":703.8077425226893,"y":539.4253733189122,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"m4ziy1mSgE","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"2wAMX0gFgF","portName":"nextAction"}]}},"inputData":{"script":{"text":"import pywinauto\r\nfrom pywinauto import keyboard\r\nfrom time import sleep\r\n\r\ndataclasses = {%ssNkRVJjfH%}\r\nCredentials = dataclasses[0]\r\nProcess = dataclasses[1]\r\nExcelInfo = dataclasses[3]\r\nExcel = {%2wAMX0gFgF%}\r\n\r\nclass Colvir:\r\n    def __init__(self, credentials: Credentials, process: Process, excel: ExcelInfo) -> None:\r\n        self.credentials = credentials\r\n        self.process_name, self.process_path = process.name, process.path\r\n        self.pid = None\r\n        self.desktop = pywinauto.Desktop(backend='uia')\r\n        self.app = None\r\n        self.excel = excel\r\n        self.excel_name = ''\r\n        self.excel_date = ''\r\n        self.errored = False\r\n\r\n    def run(self) -> None:\r\n        self.correct_excel(self.excel)\r\n        try:\r\n            self._run()\r\n        except pywinauto.findwindows.ElementNotFoundError:\r\n            self.kill()\r\n            self.run()\r\n            return\r\n\r\n        sleep(1)\r\n        loading_import_win = self.app.window(title='Colvir Banking System', found_index=0)\r\n        loading_import_win.wait_not(wait_for_not='exists', timeout=360)\r\n\r\n        sleep(2)\r\n        if self.app.window(title='Произошла ошибка').exists():\r\n            self.errored = True\r\n            self.kill()\r\n            return\r\n\r\n        main_win = self.app.window(title='Импорт файлов', found_index=0)\r\n        main_win.wait(wait_for='exists', timeout=60)\r\n        main_win.set_focus()\r\n\r\n        keyboard.send_keys('{VK_F5}')\r\n\r\n        select_win = self.app.window(title='Выбор отчета')\r\n        select_win.wait(wait_for='exists', timeout=60)\r\n        select_win['Предварительный просмотр'].click()\r\n\r\n        keyboard.send_keys('{VK_F9}')\r\n\r\n        filter_win = self.app.window(title='Фильтр')\r\n        filter_win.wait(wait_for='exists', timeout=60)\r\n        filter_win['Edit2'].set_text(text='Z_160_RPT_IMP_FZDOHOD')\r\n        filter_win['OK'].click()\r\n        sleep(.5)\r\n\r\n        loading_import_win = self.app.window(title='Colvir Banking System')\r\n        loading_import_win.wait_not(wait_for_not='exists', timeout=360)\r\n\r\n        select_win['Экспорт в файл...'].click()\r\n\r\n        file_win = self.app.window(title='Файл отчета ')\r\n        file_win.wait(wait_for='exists', timeout=60)\r\n        file_win['Edit2'].set_text(text='Z_160_RPT_IMP_FZDOHOD.xml')\r\n        sleep(.05)\r\n        file_win['Edit'].set_text(text=r'C:\\REPORTS')\r\n        sleep(.05)\r\n        try:\r\n            file_win['ComboBox'].select(8)\r\n        except (IndexError, ValueError):\r\n            pass\r\n\r\n        file_win['OK'].click()\r\n\r\n        settings_win = self.app.window(title='Параметры отчета ')\r\n        settings_win['Edit0'].set_text(text=self.excel_date)\r\n        settings_win['OK'].click()\r\n\r\n        sleep(2)\r\n        loading_import_win = self.app.window(title='Colvir Banking System')\r\n        loading_import_win.wait_not(wait_for_not='exists', timeout=360)\r\n        sleep(2)\r\n        loading_import_win = self.app.window(title='Colvir Banking System')\r\n        loading_import_win.wait_not(wait_for_not='exists', timeout=360)\r\n\r\n        select_win = self.app.window(title='Выбор отчета')\r\n        select_win.set_focus()\r\n        select_win.wait(wait_for='active', timeout=60)\r\n        keyboard.send_keys('{ESC}')\r\n\r\n        self.choose_mode('TREPRT')\r\n\r\n        select_win = self.app.window(title='Выбор отчета')\r\n        select_win.wait(wait_for='exists', timeout=60)\r\n        select_win['Предварительный просмотр'].click()\r\n\r\n        keyboard.send_keys('{VK_F9}')\r\n\r\n        filter_win = self.app.window(title='Фильтр')\r\n        filter_win.wait(wait_for='exists', timeout=60)\r\n        filter_win['Edit2'].set_text(text='Z_160_RPT_FZDOHOD')\r\n        filter_win['OK'].click()\r\n        sleep(.5)\r\n\r\n        loading_import_win = self.app.window(title='Colvir Banking System')\r\n        loading_import_win.wait_not(wait_for_not='exists', timeout=360)\r\n\r\n        select_win['Экспорт в файл...'].click()\r\n\r\n        file_win = self.app.window(title='Файл отчета ')\r\n        file_win.wait(wait_for='exists', timeout=60)\r\n        file_win['Edit2'].set_text(text='Z_160_RPT_FZDOHOD.xml')\r\n        sleep(.05)\r\n        file_win['Edit'].set_text(text=r'C:\\REPORTS')\r\n        sleep(.05)\r\n        try:\r\n            file_win['ComboBox'].select(8)\r\n        except (IndexError, ValueError):\r\n            pass\r\n\r\n        file_win['OK'].click()\r\n\r\n        settings_win = self.app.window(title='Параметры отчета ')\r\n        settings_win['Edit0'].set_text(text=self.excel_date)\r\n        settings_win['Edit2'].set_text(text='Штатные сотрудники')\r\n        settings_win['OK'].click()\r\n\r\n        sleep(2)\r\n        loading_import_win = self.app.window(title='Colvir Banking System')\r\n        loading_import_win.wait_not(wait_for_not='exists', timeout=360)\r\n        sleep(2)\r\n        loading_import_win = self.app.window(title='Colvir Banking System')\r\n        loading_import_win.wait_not(wait_for_not='exists', timeout=360)\r\n\r\n        sleep(1)\r\n        self.kill()\r\n\r\n    def _run(self) -> None:\r\n        self.login()\r\n        sleep(4)\r\n\r\n        self.app = pywinauto.Application(backend='uia').connect(process=self.pid)\r\n        self.confirm_warning()\r\n        sleep(1)\r\n        try:\r\n            self.choose_mode('C_IMPFILELUSER')\r\n        except pywinauto.findwindows.ElementNotFoundError as e:\r\n            raise e\r\n\r\n        main_win = self.app.window(title='Импорт файлов', found_index=0)\r\n        main_win.wait(wait_for='exists', timeout=60)\r\n        main_win.set_focus()\r\n\r\n        keyboard.send_keys('{VK_F7}')\r\n        filter_win = self.app.window(title='Поиск по наименованию')\r\n        filter_win.wait(wait_for='exists', timeout=60)\r\n        filter_win['Edit'].set_text('Z_160_IMP_FZ_DOHOD')\r\n        filter_win['OK'].click()\r\n\r\n        keyboard.send_keys('%')\r\n        keyboard.send_keys('{ENTER}')\r\n        keyboard.send_keys('{VK_DOWN}')\r\n        keyboard.send_keys('{ENTER}')\r\n\r\n        open_win = self.app.window(title='Open')\r\n        open_win.wait(wait_for='exists', timeout=60)\r\n        open_win['File name:Edit'].set_text(self.excel_name)\r\n\r\n        keyboard.send_keys('{ENTER}')\r\n\r\n    def correct_excel(self, excel: ExcelInfo) -> None:\r\n        exc = Excel(excel)\r\n        exc.correct()\r\n        self.excel_name = exc.corrected_name\r\n        self.excel_date = exc.date\r\n\r\n    def login(self) -> None:\r\n        pywinauto.Application(backend='uia').start(cmd_line=self.process_path)\r\n\r\n        login_win = self.desktop.window(title='Вход в систему')\r\n        login_win.wait(wait_for='exists', timeout=60)\r\n\r\n        self.pid = login_win.wrapper_object().process_id()\r\n\r\n        login_win.Edit2.set_text(text=self.credentials.usr)\r\n        login_win.Edit0.set_text(text=self.credentials.psw)\r\n\r\n        login_win.OK.click()\r\n\r\n    def confirm_warning(self) -> None:\r\n        win = self.app.top_window()\r\n        button = win['Button']\r\n        if button.exists(timeout=2):\r\n            button.click()\r\n\r\n    def choose_mode(self, mode: str) -> None:\r\n        mode_win = self.app.window(title='Выбор режима')\r\n        mode_win['Edit'].set_text(text=mode)\r\n        keyboard.send_keys('{ENTER}')\r\n\r\n    def kill(self) -> None:\r\n        self.app.kill()\r\n\r\n__return__ = Colvir"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Colvir class"},"m4ziy1mSgE":{"id":"m4ziy1mSgE","x":"992.324","y":"355.581","type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"WnsbGRG74Z","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"GJ_3m2NO-a","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport shutil\r\n\r\nArchiveInfo = {%ssNkRVJjfH%}[4]\r\n\r\nclass Archive:\r\n    def __init__(self, info: ArchiveInfo) -> None:\r\n        self.zip = info\r\n\r\n    def run(self) -> None:\r\n        try:\r\n            os.unlink(self.zip.zip_name)\r\n        except FileNotFoundError:\r\n            pass\r\n        shutil.make_archive(self.zip.file_name, 'zip', self.zip.zip_dir)\r\n\r\n__return__ = Archive"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Archive class"},"WnsbGRG74Z":{"id":"WnsbGRG74Z","x":"991.944","y":"448.486","type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"mFiVR1nErt","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"m4ziy1mSgE","portName":"nextAction"}]}},"inputData":{"script":{"text":"import win32com.client\r\n\r\nEmailInfo = {%ssNkRVJjfH%}[5]\r\n\r\nclass Email:\r\n    def __init__(self, email_info: EmailInfo,\r\n                 subject: str, body: str, attachment: str = None) -> None:\r\n        self.email = email_info\r\n        self.outlook = win32com.client.Dispatch('Outlook.Application')\r\n        self.subject, self.body = subject, body\r\n        self.attachment = attachment if attachment else None\r\n\r\n    def run(self) -> None:\r\n        for mail_address in self.email.email_list:\r\n            self.send_mail(mail_address)\r\n\r\n    def send_mail(self, mail_address: str) -> None:\r\n        mail = self.outlook.CreateItem(0)\r\n        mail.To = mail_address\r\n        mail.Subject = self.subject\r\n        mail.Body = self.body\r\n        if self.attachment:\r\n            mail.Attachments.Add(self.attachment)\r\n        mail.Send()\r\n\r\n__return__ = Email"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Email class"},"mFiVR1nErt":{"id":"mFiVR1nErt","x":998.3344964255514,"y":542.3889632347576,"type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"FTB54cTBrK","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"WnsbGRG74Z","portName":"nextAction"}]}},"inputData":{"script":{"text":"import os\r\nimport psutil\r\nfrom time import sleep\r\nfrom datetime import datetime as dt\r\nimport win32com.client as win32\r\nimport shutil\r\n\r\ndataclasses = {%ssNkRVJjfH%}\r\nCredentials = dataclasses[0]\r\nProcess = dataclasses[1]\r\nExcelInfo = dataclasses[3]\r\nArchiveInfo = dataclasses[4]\r\nEmailInfo = dataclasses[5]\r\nColvir = {%GJ_3m2NO-a%}\r\nArchive = {%m4ziy1mSgE%}\r\nEmail = {%WnsbGRG74Z%}\r\n\r\nclass Robot:\r\n    def __init__(self, credentials: Credentials, process: Process, excel: ExcelInfo,\r\n                 archive_info: ArchiveInfo, email_info: EmailInfo) -> None:\r\n        self.colvir = Colvir(\r\n            credentials=credentials,\r\n            process=process,\r\n            excel=excel\r\n        )\r\n        self.archive_info = archive_info\r\n        self.process_name, self.dir = process.name, archive_info.zip_dir\r\n        self.archive = Archive(info=archive_info)\r\n        self.today = dt.now().strftime('%d.%m.%Y')\r\n        self.email_info = email_info\r\n        self.attachment = archive_info.zip_name\r\n        self.excel = excel\r\n\r\n    def run(self) -> None:\r\n        self.kill_all()\r\n        self.colvir.run()\r\n        if self.colvir.errored:\r\n            email = Email(\r\n                email_info=self.email_info,\r\n                subject=f'Возникла ошибка при импорте файла. '\r\n                        f'Просьба перепроверить оригинальный файл {self.today}',\r\n                body=f'Возникла ошибка при импорте файла. '\r\n                     f'Пожалуйста перепроверьте оригинальный файл.\\n\\nСообщение сгенерировано автоматически. '\r\n                     f'Просьба не отвечать.',\r\n            )\r\n            email.run()\r\n            self.return_file()\r\n            return\r\n        self.open_folder()\r\n        self.convert_to_xlsb()\r\n        self.archive.run()\r\n        email = Email(\r\n            email_info=self.email_info,\r\n            subject=f'Протокол ошибок по оплате труда {self.today}',\r\n            body=f'Вложенные протоколы по работе робота.\\n\\n'\r\n                 f'Сообщение сгенерировано автоматически. Просьба не отвечать.',\r\n            attachment=self.attachment\r\n        )\r\n        email.run()\r\n        self.return_file()\r\n\r\n    def convert_to_xlsb(self):\r\n        excel = win32.Dispatch(\"Excel.Application\")\r\n        excel.DisplayAlerts = False\r\n\r\n        for report_file in os.listdir(self.archive_info.zip_dir):\r\n            file_name = os.path.join(self.archive_info.zip_dir, report_file)\r\n            if not os.path.isfile(file_name):\r\n                continue\r\n            wb = excel.Workbooks.OpenXML(file_name)\r\n            wb.SaveAs(file_name.replace('.xml', '.xlsb'), 50)\r\n            wb.Close()\r\n            os.unlink(file_name)\r\n\r\n    def open_folder(self) -> None:\r\n        path = os.path.realpath(self.dir)\r\n        os.startfile(path)\r\n\r\n    def kill_all(self) -> None:\r\n        for proc in psutil.process_iter():\r\n            if any(process_name in proc.name() for process_name in [self.process_name, 'EXCEL']):\r\n                try:\r\n                    p = psutil.Process(proc.pid)\r\n                    p.terminate()\r\n                except psutil.AccessDenied:\r\n                    continue\r\n        sleep(.5)\r\n\r\n    def return_file(self):\r\n        source = os.path.join(self.excel.path, self.excel.name)\r\n        destination = os.path.join(self.excel.path.replace(r'\\Сверка', ''), self.excel.name)\r\n        shutil.move(source, destination)\r\n\r\n__return__ = Robot"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Robot class"},"FTB54cTBrK":{"id":"FTB54cTBrK","x":1284.9491537000686,"y":446.1311760150699,"type":"invoce_code_script","connections":{"inputs":{},"outputs":{"actionPort":[{"nodeId":"mFiVR1nErt","portName":"nextAction"}]}},"inputData":{"script":{"text":"import ast\r\nfrom os import listdir\r\nfrom os.path import isfile, join\r\nfrom datetime import datetime as dt\r\n\r\nData = {%ssNkRVJjfH%}[6]\r\nRobot = {%mFiVR1nErt%}\r\nEmail = {%WnsbGRG74Z%}\r\nEmailInfo = {%ssNkRVJjfH%}[5]\r\n\r\ndef get_input_data() -> Data:\r\n    excel_path = {{excel_path}}\r\n    excel_name = [f for f in listdir(excel_path) if isfile(join(excel_path, f))][0]\r\n\r\n    return Data(\r\n        usr={{usr}},\r\n        psw={{psw}},\r\n        process_name={{process_name}},\r\n        process_path={{process_path}},\r\n        excel_path=excel_path,\r\n        excel_name=excel_name,\r\n        zip_dir={{zip_dir}},\r\n        zip_file={{zip_file}},\r\n        email_list=ast.literal_eval({{email_list}}),\r\n    )\r\n\r\ndata = get_input_data().data\r\nrobot = Robot(**data)\r\nrobot.run()\r\n\r\n# try:\r\n#     data = get_input_data().data\r\n#     robot = Robot(**data)\r\n#     robot.run()\r\n# except IndexError:\r\n#     today = dt.now().strftime('%d.%m.%Y')\r\n#     email = Email(\r\n#         email_info=EmailInfo(email_list=ast.literal_eval({{email_list}})),\r\n#         subject=f'Отсутствует файл для проверки {today}',\r\n#         body=f'Отсутствует файл для проверки в \\\\\\\\dbu00234\\\\c$\\\\Temp\\\\Сверка\\n\\n'\r\n#                 f'Пожалуйста добавьте его перед запуском робота.\\n\\nСообщение сгенерировано автоматически. '\r\n#                 f'Просьба не отвечать.',\r\n#     )\r\n#     email.run()"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Main"},"EFu33nvEF3":{"id":"EFu33nvEF3","x":"-2194.8620202020","y":"-26.317220202020","type":"invoce_code_script","connections":{"inputs":{"nextAction":[{"nodeId":"C6n9yCUDVU","portName":"actionPort"}]},"outputs":{}},"inputData":{"script":{"text":"from ast import literal_eval\r\n \r\n__return__ = (\r\n\tliteral_eval({{accounts}}),\r\n\tliteral_eval({{branches}}),\r\n\tliteral_eval({{xml_selected}})\r\n)"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}},"comment":"Convert string representation of dictionary to dictionary"},"C6n9yCUDVU":{"id":"C6n9yCUDVU","x":"-2185.4620202020","y":"102.12820202020","type":"invoce_code_assign","connections":{"inputs":{"nextAction":[{"nodeId":"6u6I75-p4s","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"EFu33nvEF3","portName":"nextAction"}]}},"inputData":{"assignTo":{"valueTo":"{{accounts}}"},"assignFrom":{"valueFrom":"{%Mr8INha69N%}[0]"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"6u6I75-p4s":{"id":"6u6I75-p4s","x":-2094.150736126105,"y":285.4369265253216,"type":"invoce_code_assign","connections":{"inputs":{"nextAction":[{"nodeId":"cpEd2Nas4L","portName":"actionPort"}]},"outputs":{"actionPort":[{"nodeId":"C6n9yCUDVU","portName":"nextAction"}]}},"inputData":{"assignTo":{"valueTo":"{{branches}}"},"assignFrom":{"valueFrom":"{%Mr8INha69N%}[1 ]"},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}},"cpEd2Nas4L":{"id":"cpEd2Nas4L","x":-2094.5398351292415,"y":381.67915069468876,"type":"invoce_code_assign","connections":{"inputs":{},"outputs":{"actionPort":[{"nodeId":"6u6I75-p4s","portName":"nextAction"}]}},"inputData":{"assignTo":{"valueTo":"{{xml_selected}} "},"assignFrom":{"valueFrom":" {%Mr8INha69N%}[2] "},"nextAction":{},"errorPort":{"repeat":null,"delay":null},"errorAction":{}},"expanded":true,"actions":{"data":{"breakpoint":false}}}}